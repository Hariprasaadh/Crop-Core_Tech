# -*- coding: utf-8 -*-
"""soil_fertility_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KlW51Re551n-B2OqlKOwLbpVxJMl3vOm
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
import pickle

df =pd.read_csv("/content/dataset1.csv")
df.head()

features=df.columns
features=features.drop("Output")
target=df["Output"]

features

Scalar=StandardScaler()
df[features]=Scalar.fit_transform(df[features])

X_train,X_test,y_train,y_test=train_test_split(df[features],target,test_size=0.2,random_state=1)

model=RandomForestClassifier(criterion="entropy",random_state=1,n_estimators=80)
model.fit(X_train,y_train)

yhat=model.predict(X_test)

print(accuracy_score(y_test,yhat))

with open('model.pkl', 'wb') as f:
    pickle.dump(model, f)

with open('model.pkl', 'rb') as f:
    model = pickle.load(f)

fertility_mapping = {
    0: 'Less Fertile',
    1: 'Medium Fertile',
    2: 'High Fertile'
}

def predict_with_input(user_input):
    input_data = pd.DataFrame([user_input])
    prediction = model.predict(input_data)
    mapped_output = fertility_mapping.get(prediction[0], 'Unknown')
    return mapped_output

# Example user input
user_input = {
    'N': 100,   # Nitrogen
    'P': 20,   # Phosphorus
    'K': 30,   # Potassium
    'pH': 6.5, # Soil pH
    'EC': 1.2, # Electrical Conductivity
    'OC': 2.0, # Organic Carbon
    'S': 5.0,  # Sulfur
    'Zn': 0.5, # Zinc
    'Fe': 1.0, # Iron
    'Cu': 0.3, # Copper
    'Mn': 0.4, # Manganese
    'B': 0.2   # Boron
}

# Make prediction
output = predict_with_input(user_input)
print(f'Predicted Output: {output}')