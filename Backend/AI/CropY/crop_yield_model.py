# -*- coding: utf-8 -*-
"""crop_yield_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12x2E5h1NDzDYHoI4gT10OpA5V3goiWbe
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score

# Load the dataset
crop_yield_pred_df = pd.read_csv("crop_yield.csv")

# Initialize LabelEncoder
le_crop = LabelEncoder()
le_state = LabelEncoder()
le_season = LabelEncoder()

# Encode categorical columns
crop_yield_pred_df["Crop"] = le_crop.fit_transform(crop_yield_pred_df["Crop"])
crop_yield_pred_df["State"] = le_state.fit_transform(crop_yield_pred_df["State"])
crop_yield_pred_df["Season"] = le_season.fit_transform(crop_yield_pred_df["Season"])

# Save LabelEncoders for future use
with open('label_encoder_crop.pkl', 'wb') as file:
    pickle.dump(le_crop, file)

with open('label_encoder_state.pkl', 'wb') as file:
    pickle.dump(le_state, file)

with open('label_encoder_season.pkl', 'wb') as file:
    pickle.dump(le_season, file)

# Split features and target
columns = crop_yield_pred_df.columns
features = crop_yield_pred_df[columns.drop(["Yield", "Crop_Year", "Production"])]
target = crop_yield_pred_df["Yield"]

# Split the data
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.261, random_state=1)

# Train the model

features.columns

model = RandomForestRegressor(n_estimators=80, criterion="poisson")
model.fit(X_train, y_train)

# Make predictions and check the score
predictions = model.predict(X_test)
print(f"R2Score: {r2_score(y_test, predictions): .2f}")

# Save the model
with open('model.pkl', 'wb') as file:
    pickle.dump(model, file)

import numpy as np
import pickle

# Load the saved model
with open('model.pkl', 'rb') as file:
    loaded_model = pickle.load(file)

# Load the saved LabelEncoders
with open('label_encoder_crop.pkl', 'rb') as file:
    le_crop = pickle.load(file)
with open('label_encoder_state.pkl', 'rb') as file:
    le_state = pickle.load(file)
with open('label_encoder_season.pkl', 'rb') as file:
    le_season = pickle.load(file)

# Function to safely encode labels
def safe_transform(encoder, label):
    try:
        return encoder.transform([label])[0]
    except ValueError:
        # Return a default value (e.g., -1) for unseen labels
        return -1

# Example user input from the website (replace with actual form input)
user_crop = "Wheat"
user_state = "Karnataka"
user_season = "Kharif"
other_feature_values = [73814, 2051.4, 7024878.38, 22882.34]  # Add the rest of your features here

# Safely encode the input values using the saved LabelEncoders
encoded_crop = safe_transform(le_crop, user_crop)
encoded_state = safe_transform(le_state, user_state)
encoded_season = safe_transform(le_season, user_season)

# Prepare the input data for prediction
user_features = pd.DataFrame([[encoded_crop , encoded_season, encoded_state] + other_feature_values],
                             columns = columns.drop(["Yield", "Crop_Year", "Production"]))
# Make the prediction
prediction = loaded_model.predict(user_features)
print(f"Predicted Yield: {prediction[0]:.2f}")

